Project Title: NetWatch SIEM â€” Intelligent Network & Device Monitoring System Developer: John Mark ðŸ‡°ðŸ‡ª Goal: Build a full, production-ready Flask-based system that monitors network devices and behaviors in real-time, like a mini SIEM dashboard, designed for local use by Kenyan users (home, offices, cybercafes, and schools).
Tech Stack:
* Backend: Flask (Python 3.x)
* Frontend: Pure HTML, CSS (no frameworks), JavaScript (vanilla JS only)
* Data Format: JSON for frontend-backend data exchange
* Database: SQLite (for offline use and simplicity)
System Summary: NetWatch SIEM continuously scans the local network and tracks devices, sessions, anomalies, and policy violations. It stores all network events, generates alerts based on defined rules, and displays real-time analytics on a dashboard â€” all local, no internet required.
Core Features:
1. Device Discovery & Monitoring
   * Use ARP scanning and ping sweeps to detect connected devices (IP, MAC, vendor, hostname).
   * Log every detection with timestamp.
   * Track online/offline status changes.
2. Event Logging System (SIEM style)
   * Store all events (device joins, disconnects, repeated failures, unknown devices, traffic spikes, etc.) in a logs table.
   * Each event has: timestamp, event_type, description, severity, device_id.
3. Rule-Based Alert Engine
   * Alerts trigger when a rule is matched.
   * Examples of rule triggers:
      * New device detected
      * Device reconnects too frequently
      * High packet count from one IP
      * Device inactive for long period
      * Suspicious MAC prefix (e.g., vendor unknown)
      * Change in IP or MAC of a known device
   * Alerts stored and shown in dashboard.
4. Alert Management Panel
   * Display active alerts, resolved alerts, severity levels (Low, Medium, High).
   * Allow marking alerts as resolved or ignored.
5. Device Intelligence Database
   * Store known devices with fields:
      * device_id, name, ip, mac, vendor, trusted (Yes/No), risk_score, first_seen, last_seen.
   * Trusted devices excluded from basic alerts but still monitored.
6. Dashboard Interface (Real-Time)
   * Clean responsive dashboard with these sections:
      * Network Overview: total devices, new today, alerts, uptime.
      * Device List: all connected devices with status (color-coded).
      * Alerts Feed: live alerts with severity icons.
      * Activity Graph: timeline of events (using HTML Canvas or JS charts).
      * System Logs: scrollable event history.
   * Auto-refresh via AJAX/JSON fetch every few seconds.
7. Configuration Panel
   * User can define monitoring rules (thresholds, inactivity timeouts, suspicious patterns).
   * Set alert preferences: pop-up, sound, or email (optional).
   * License key entry (for Pro version activation).
8. License & Version System
   * Store encrypted license key in DB.
   * Allow Lite (limited scanning interval) and Pro (full features) modes.
   * Pro version unlocks: rule editor, email alerts, traffic monitor, extended logs.
9. Traffic Monitor (Pro feature)
   * Basic per-device traffic estimation using socket or psutil counters.
   * Display graph of bandwidth usage by device.
10. System Security Logs
   * Every critical operation (rule creation, license activation, device trust change) is logged with user, time, and action.
Additional Functionalities:
* Option to export reports as JSON, CSV, or PDF.
* Ability to import/export ruleset JSON.
* Optional local REST API endpoints (/api/devices, /api/alerts, /api/rules).
* Option to run in background mode with minimal CPU usage.
Design Requirements:
* Interface must use pure HTML and CSS (no frameworks) â€” minimal, dark or cyber-style theme.
* JavaScript should handle live updates, form submissions (AJAX), and visualizations.
* CSS should use a professional SIEM-style layout: sidebar navigation, top bar metrics, color-coded statuses.
Folder Structure Example:

```
just imagining like a fronted like this, with fully acomadating the backed kater. wow!, but youcan enhacce it more, more more.so let us stsrt with the frontedn and finsh with backd, bery strong backnde, nothig lesss, maybe more
. rmeber the tech stacks asked, no framework exceot flask for bakde...if it is UI, us CSS well. JS, ...i mentioned